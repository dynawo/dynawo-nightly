# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# See AUTHORS.txt
# All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0
#
# This file is part of Dynawo, an hybrid C++/Modelica open source time domain
# simulation tool for power systems.
#
# Continous Integration setup for Dynawo.

language: cpp

services:
  - docker

notifications:
  email:
    recipients:
      - gautier.bureau@rte-france.com
      - florentine.rosiere@rte-france.com
    on_success: never
    on_failure: always

env:
  global:
    - DYNAWO_HOME=/home/dynawo_travis/dynawo;
    - DYNAWO_INSTALL_OPENMODELICA=/opt/OpenModelica/Install
    - DYNAWO_SRC_OPENMODELICA=/opt/OpenModelica/Source
    - DYNAWO_INSTALL_OPENMODELICA_LOCAL=/home/dynawo_travis/dynawo/OpenModelica/Install
    - DYNAWO_SRC_OPENMODELICA_LOCAL=/home/dynawo_travis/dynawo/OpenModelica/Source
    - DYNAWO_NB_PROCESSORS_USED=$(grep -c \^processor /proc/cpuinfo)
    - DYNAWO_RESULTS_SHOW="false"
    - DYNAWO_ADEPT_DOWNLOAD_URL=http://localhost:8080
    - DYNAWO_SUNDIALS_DOWNLOAD_URL=http://localhost:8080
    - DYNAWO_SUITE_SPARSE_DOWNLOAD_URL=http://localhost:8080
    - DYNAWO_JQUERY_DOWNLOAD_URL=http://localhost:8080
    - DYNAWO_FLOT_DOWNLOAD_URL=http://localhost:8080
    - DYNAWO_CPPLINT_DOWNLOAD_URL=http://localhost:8080
    - DYNAWO_XERCESC_DOWNLOAD_URL=http://localhost:8080
    - dynawo_om_env=$(echo -n "-e DYNAWO_INSTALL_OPENMODELICA -e DYNAWO_SRC_OPENMODELICA")
    - dynawo_om_env_local=$(echo -n "-e DYNAWO_INSTALL_OPENMODELICA_LOCAL -e DYNAWO_SRC_OPENMODELICA_LOCAL")
    - dynawo_env=$(echo -n "-e DYNAWO_HOME -e DYNAWO_NB_PROCESSORS_USED -e DYNAWO_RESULTS_SHOW -e DYNAWO_BUILD_TYPE -e DYNAWO_CXX11_ENABLED -e DYNAWO_COMPILER -e DYNAWO_LIBRARY_TYPE")
    - dynawo_env_url=$(echo -n "-e DYNAWO_ADEPT_DOWNLOAD_URL -e DYNAWO_SUNDIALS_DOWNLOAD_URL -e DYNAWO_SUITE_SPARSE_DOWNLOAD_URL -e DYNAWO_JQUERY_DOWNLOAD_URL -e DYNAWO_FLOT_DOWNLOAD_URL -e DYNAWO_CPPLINT_DOWNLOAD_URL -e DYNAWO_XERCESC_DOWNLOAD_URL")

install:
  - docker pull dynawo/dynawo-travis
  - docker run -itd -u dynawo_travis --name dynawo_travis_container dynawo/dynawo-travis-nightly
  - GIT_COMMAND="git clone --depth=1 https://github.com/dynawo/dynawo.git dynawo"
  - docker exec dynawo_travis_container bash -c "$GIT_COMMAND"
  - docker exec dynawo_travis_container bash -c "cd /opt;nohup python -m SimpleHTTPServer 8080 &> /dev/null &"
  - LOG_COMMAND="cd dynawo;git log -1 --decorate"
  - docker exec dynawo_travis_container bash -c "$LOG_COMMAND"
  - COMMAND=$(echo -n "cd dynawo;util/envDynawo.sh build-3rd-party-version;RETURN_CODE=\$?;if [ \${RETURN_CODE} -ne 0 ]; then exit \${RETURN_CODE}; fi;util/envDynawo.sh build-dynawo;")
  - echo $COMMAND
  - NRT_COMMAND=$(echo -n "cd dynawo;util/envDynawo.sh nrt;")
  - echo $NRT_COMMAND
  - BUILD_OMC_COMMAND=$(echo -n "cd dynawo;export DYNAWO_SRC_OPENMODELICA=$DYNAWO_SRC_OPENMODELICA_LOCAL; export DYNAWO_INSTALL_OPENMODELICA=$DYNAWO_INSTALL_OPENMODELICA_LOCAL; util/envDynawo.sh build-omcDynawo;")
  - echo $BUILD_OMC_COMMAND

jobs:
  include:
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=NO DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=STATIC
      script:
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$COMMAND"
        - docker exec $dynawo_env $dynawo_om_env $dynawo_env_url dynawo_travis_container bash -c "$NRT_COMMAND"
    - stage: build
      os: linux
      dist: trusty
      sudo: required
      DYNAWO_COMPILER: g++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=GCC DYNAWO_LIBRARY_TYPE=SHARED
      script:
        - docker exec $dynawo_env $dynawo_om_env_local $dynawo_env_url dynawo_travis_container bash -c "$BUILD_OMC_COMMAND"
    - stage: build
      os: osx
      osx_image: xcode10.3
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=SHARED DYNAWO_INSTALL_OPENMODELICA=/opt/Dynawo_MacOS_latest/OpenModelica
      script:
        - (cd /opt && curl -L $(curl -s -L -X GET https://api.github.com/repos/dynawo/dynawo/releases/latest | grep "Dynawo_MacOS" | grep url | cut -d '"' -f 4) -o Dynawo_MacOS_latest.zip)
        - unzip /opt/Dynawo_MacOS_latest.zip -d /opt/Dynawo_MacOS_latest
        - util/envDynawo.sh build-3rd-party-version
        - util/envDynawo.sh build-dynawo
    - stage: build
      os: osx
      osx_image: xcode10.3
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=SHARED DYNAWO_INSTALL_OPENMODELICA=/opt/Dynawo_MacOS_latest/OpenModelica
      script:
        - (cd /opt && curl -L $(curl -s -L -X GET https://api.github.com/repos/dynawo/dynawo/releases/latest | grep "Dynawo_MacOS" | grep url | cut -d '"' -f 4) -o Dynawo_MacOS_latest.zip)
        - unzip /opt/Dynawo_MacOS_latest.zip -d /opt/Dynawo_MacOS_latest
        - util/envDynawo.sh build-3rd-party-version
        - util/envDynawo.sh build-dynawo
    - stage: build
      os: osx
      osx_image: xcode10.3
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Release DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=STATIC DYNAWO_INSTALL_OPENMODELICA=/opt/Dynawo_MacOS_latest/OpenModelica
      script:
        - (cd /opt && curl -L $(curl -s -L -X GET https://api.github.com/repos/dynawo/dynawo/releases/latest | grep "Dynawo_MacOS" | grep url | cut -d '"' -f 4) -o Dynawo_MacOS_latest.zip)
        - unzip /opt/Dynawo_MacOS_latest.zip -d /opt/Dynawo_MacOS_latest
        - util/envDynawo.sh build-3rd-party-version
        - util/envDynawo.sh build-dynawo
    - stage: build
      os: osx
      osx_image: xcode10.3
      DYNAWO_COMPILER: clang++
      env: DYNAWO_BUILD_TYPE=Debug DYNAWO_CXX11_ENABLED=YES DYNAWO_COMPILER=CLANG DYNAWO_LIBRARY_TYPE=STATIC DYNAWO_INSTALL_OPENMODELICA=/opt/Dynawo_MacOS_latest/OpenModelica
      script:
        - (cd /opt && curl -L $(curl -s -L -X GET https://api.github.com/repos/dynawo/dynawo/releases/latest | grep "Dynawo_MacOS" | grep url | cut -d '"' -f 4) -o Dynawo_MacOS_latest.zip)
        - unzip /opt/Dynawo_MacOS_latest.zip -d /opt/Dynawo_MacOS_latest
        - util/envDynawo.sh build-3rd-party-version
        - util/envDynawo.sh build-dynawo
